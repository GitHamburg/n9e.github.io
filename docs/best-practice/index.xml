<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>夜莺实战 on N9E</title>
    <link>https://n9e.github.io/best-practice/</link>
    <description>Recent content in 夜莺实战 on N9E</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://n9e.github.io/best-practice/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>探讨业务组的设计和最佳实践</title>
      <link>https://n9e.github.io/best-practice/busi-group-design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://n9e.github.io/best-practice/busi-group-design/</guid>
      <description>要说业务组这个概念，可能要先聊聊机器分组的设计，之前为此专门写过一篇公众号文章《设计篇-监控系统机器分组设计，你是我的知音么？》，建议感兴趣的朋友读一读。反正最终，以现在的认知来看，用标签来做机器分组是最合适的，虽然标签没有那么直观，但是足够灵活，再佐以业务组这个设计，做相关筛选的时候，先用业务组做第一层筛选，后面再用标签来筛，标签不够直观这个缺点可以被大大的规避。
再说各种规则，比如告警规则、屏蔽规则、订阅规则，这些规则如果没有一种归组管理方式，就是全公司的规则都平铺到一个表格里，会显得非常混乱。比如我是某个业务线的研发人员，我肯定就关心自己业务线的那些规则，才不想看到别的业务线的规则呢。所以我们需要一个规则分组机制，类似一个namespace的东西，来对这些规则分个组。
再就是权限，这些告警规则、监控对象、自愈脚本等，谁可以修改维护？总得关联到具体的一些人上。对于某个产品的相关规则、监控对象等，是由一批相同的人来维护的，所以抽象一个业务组这样的概念，把这些资产都归到这个业务组里，也方便配置权限。另外就是告警自愈以及机器上跑脚本，这个动作比较危险，要好好控制权限，机器隶属业务组，业务组有管理人员，这种管理模式相对比较简单清晰。
综上，我们设计了业务组这个概念，夜莺中的各种实体大都是归到业务组的，比如监控对象、各类规则、自愈脚本等，业务组一般是一个自闭环的组织，他们自己管理自己的机器设备，自己管理自己的告警规则，跟其他的业务组没什么交集。举个例子，比如公司的DBA团队，管理了公司的所有mysql数据库以及相关的机器，这种就可以单独建立一个业务组；再比如基础网络的同学，管理了公司所有的网络设备，跟其他业务线关系不大，就可以建立一个专门的业务组，放置网络设备监控对象，以及相关的告警规则。
当然了，公司也可能有个统一的运维团队，管理所有的告警规则，普通研发人员都不会去创建告警规则，这种情况，这个统一的运维团队可以创建一个业务组，比如叫infra，放置公司所有的监控对象，配置告警规则。其他各个团队，可以创建自己的业务组，然后订阅infra的告警规则（订阅可以跨业务组订阅），每个业务团队创建的业务组里只有订阅规则，与其他业务组隔离，比较清晰较为容易管理。
 对于监控对象，只要有监控数据上报，n9e-server就会自动从监控对象中解析到ident标签，取其值当做监控对象，注册到mysql监控对象这个表里。刚注册上来的监控对象是未归组的，此时应该由Admin角色的人去把这些监控对象做分配，分配给不同的业务组，分完之后，各个业务组的人就自己玩自己的就好了。
业务组的人，对于刚刚分配过来的监控对象设备，建议首先做的事情，就是打上一个bg的标签，比如bg=cloud表示相关的监控对象都隶属cloud这个Business Group。未来这些监控对象告警了，告警事件中会自动带上bg=cloud这个标签，收报警的人就可以立刻知道这是哪个bg的监控对象。</description>
    </item>
    <item>
      <title>监控Linux操作系统</title>
      <link>https://n9e.github.io/best-practice/linux_host/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://n9e.github.io/best-practice/linux_host/</guid>
      <description>部署了Telegraf即可采集到常见的监控指标了，Telegraf具体使用前面有章节介绍了，这里不再赘述，这里主要提供常见大盘配置和告警规则配置的JSON，便于大家快速上手。
Linux操作系统监控大盘 [ { &amp;#34;name&amp;#34;: &amp;#34;Linux基本监控指标-Telegraf采集&amp;#34;, &amp;#34;tags&amp;#34;: &amp;#34;HOST&amp;#34;, &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;var\&amp;#34;:[{\&amp;#34;name\&amp;#34;:\&amp;#34;host\&amp;#34;,\&amp;#34;definition\&amp;#34;:\&amp;#34;label_values(mem_used_percent, ident)\&amp;#34;}]}&amp;#34;, &amp;#34;chart_groups&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;Default chart group&amp;#34;, &amp;#34;weight&amp;#34;: 0, &amp;#34;charts&amp;#34;: [ { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;整机CPU空闲率(%)\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;cpu_usage_idle{cpu=\\\&amp;#34;cpu-total\\\&amp;#34;, ident=\\\&amp;#34;$host\\\&amp;#34;}\&amp;#34;}],\&amp;#34;yplotline1\&amp;#34;:35,\&amp;#34;yplotline2\&amp;#34;:15,\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;asc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;origin\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:8,\&amp;#34;x\&amp;#34;:0,\&amp;#34;y\&amp;#34;:0,\&amp;#34;i\&amp;#34;:\&amp;#34;0\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 }, { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;内存可用率(%)\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;mem_available_percent{ident=\\\&amp;#34;$host\\\&amp;#34;}\&amp;#34;}],\&amp;#34;yplotline1\&amp;#34;:30,\&amp;#34;yplotline2\&amp;#34;:15,\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;asc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;origin\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:8,\&amp;#34;x\&amp;#34;:8,\&amp;#34;y\&amp;#34;:0,\&amp;#34;i\&amp;#34;:\&amp;#34;1\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 }, { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;硬盘利用率(%)\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;disk_used_percent{ident=\\\&amp;#34;$host\\\&amp;#34;}\&amp;#34;}],\&amp;#34;yplotline1\&amp;#34;:87,\&amp;#34;yplotline2\&amp;#34;:92,\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;origin\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:8,\&amp;#34;x\&amp;#34;:16,\&amp;#34;y\&amp;#34;:0,\&amp;#34;i\&amp;#34;:\&amp;#34;2\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 }, { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;IO.UTIL(%)\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;rate(diskio_io_time{ident=\\\&amp;#34;$host\\\&amp;#34;}[1m])/10\&amp;#34;}],\&amp;#34;yplotline1\&amp;#34;:90,\&amp;#34;yplotline2\&amp;#34;:null,\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;origin\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:8,\&amp;#34;x\&amp;#34;:0,\&amp;#34;y\&amp;#34;:2,\&amp;#34;i\&amp;#34;:\&amp;#34;3\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 }, { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;网卡每分钟丢包数（个）\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;increase(net_drop_in{ident=\\\&amp;#34;$host\\\&amp;#34;}[1m])\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;net_drop_in ident:{{ident}} interface:{{interface}}\&amp;#34;},{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;increase(net_drop_out{ident=\\\&amp;#34;$host\\\&amp;#34;}[1m])\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;net_drop_out ident:{{ident}} interface:{{interface}}\&amp;#34;}],\&amp;#34;yplotline1\&amp;#34;:5,\&amp;#34;yplotline2\&amp;#34;:20,\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;short\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:8,\&amp;#34;x\&amp;#34;:8,\&amp;#34;y\&amp;#34;:2,\&amp;#34;i\&amp;#34;:\&amp;#34;4\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 }, { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;TCP_TIME_WAIT数量\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;netstat_tcp_time_wait{ident=\\\&amp;#34;$host\\\&amp;#34;}\&amp;#34;}],\&amp;#34;yplotline1\&amp;#34;:null,\&amp;#34;yplotline2\&amp;#34;:20000,\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;short\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:8,\&amp;#34;x\&amp;#34;:16,\&amp;#34;y\&amp;#34;:2,\&amp;#34;i\&amp;#34;:\&amp;#34;5\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 } ] } ] } ] Linux操作系统常用告警规则 [ { &amp;#34;name&amp;#34;: &amp;#34;有地址PING不通，请注意&amp;#34;, &amp;#34;note&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;severity&amp;#34;: 1, &amp;#34;disabled&amp;#34;: 0, &amp;#34;prom_for_duration&amp;#34;: 60, &amp;#34;prom_ql&amp;#34;: &amp;#34;ping_result_code !</description>
    </item>
    <item>
      <title>使用SNMP采集网络设备的指标</title>
      <link>https://n9e.github.io/best-practice/snmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://n9e.github.io/best-practice/snmp/</guid>
      <description>Telegraf内置支持snmp的采集，本节给一个入门例子，让大家快速上手，更多具体知识可以参考这里。在telegraf.conf中搜索inputs.snmp，即可找到对应的配置，例子如下：
[[inputs.snmp]] agents = [&amp;#34;udp://172.25.79.194:161&amp;#34;] timeout = &amp;#34;5s&amp;#34; version = 3 agent_host_tag = &amp;#34;ident&amp;#34; retries = 1 sec_name = &amp;#34;managev3user&amp;#34; auth_protocol = &amp;#34;SHA&amp;#34; auth_password = &amp;#34;example.Demo.c0m&amp;#34; [[inputs.snmp.field]] oid = &amp;#34;RFC1213-MIB::sysUpTime.0&amp;#34; name = &amp;#34;uptime&amp;#34; [[inputs.snmp.field]] oid = &amp;#34;RFC1213-MIB::sysName.0&amp;#34; name = &amp;#34;source&amp;#34; is_tag = true [[inputs.snmp.table]] oid = &amp;#34;IF-MIB::ifTable&amp;#34; name = &amp;#34;interface&amp;#34; inherit_tags = [&amp;#34;source&amp;#34;] [[inputs.snmp.table.field]] oid = &amp;#34;IF-MIB::ifDescr&amp;#34; name = &amp;#34;ifDescr&amp;#34; is_tag = true 上面非常关键的部分是：agent_host_tag = &amp;quot;ident&amp;quot;，因为夜莺对ident这个标签会特殊对待处理，把携有这个标签的数据当做隶属某个监控对象的数据，机器和网络设备都是典型的期望作为监控对象来管理的，所以snmp的采集中，我们把网络设备的ip放到ident这个标签里带上去。
另外这个采集规则是v3的校验方法，不同的公司可能配置的校验方式不同，请各位参照telegraf.conf中那些snmp相关的注释仔细核对，如果是v2会简单很多，把上例中的如下部分：
version = 3 sec_name = &amp;#34;managev3user&amp;#34; auth_protocol = &amp;#34;SHA&amp;#34; auth_password = &amp;#34;example.</description>
    </item>
    <item>
      <title>内嵌Statsd SDK做APM</title>
      <link>https://n9e.github.io/best-practice/statsd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://n9e.github.io/best-practice/statsd/</guid>
      <description>StatsD简介 在内嵌Prometheus SDK做APM一节中，我们介绍了业务进程内嵌Prometheus的SDK做埋点，这种方式，会把监控数据聚合计算的逻辑放在业务进程中，比如一些平均值、分位值的计算，可能会对业务进程造成影响，本节要介绍的StatsD的方式，理念是把指标聚合计算的逻辑挪到业务进程之外，业务进程调用埋点函数的时候，通过UDP推送给StatsD，即使StatsD挂了，也不会对业务进程造成影响。
StatsD的简介，网上一搜一大把，请大家自行Google，这里就不重复描述了。核心要理解一下StatsD的设计理念、协议、支持的各个语言的SDK（在附录里有）即可，下面直接拿一个小例子讲解如何利用Telegraf支持StatsD协议的数据，数据只要进了Telegraf了，就意味着可以推到夜莺了，夜莺就相当于支持了StatsD的埋点监控采集能力。
Telegraf启用StatsD 在Telegraf的配置文件中搜索inputs.statsd就能看到对应的section：
[[inputs.statsd]] protocol = &amp;#34;udp&amp;#34; service_address = &amp;#34;:8125&amp;#34; percentiles = [50.0, 90.0, 99.0, 99.9, 99.95, 100.0] metric_separator = &amp;#34;_&amp;#34; 启用如上配置，percentiles略微有点多，可以配置的少一点，比如percentiles = [50.0, 90.0, 99.0, 100.0]，这样整体计算存储压力也会小一些。重启Telegraf，Telegraf就会在8125端口监听udp协议，接收业务埋点数据的上报。即，Telegraf实现了StatsD的协议，可以作为StatsD的Server使用。
在业务程序中埋点 附录里罗列了一些客户端SDK，这里笔者使用Go语言的一个SDK来测试，实现了一个很小的web程序，代码如下：
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/smira/go-statsd&amp;#34; ) var client *statsd.Client func homeHandler(w http.ResponseWriter, r *http.Request) { start := time.Now() // random sleep 	num := rand.Int31n(100) time.Sleep(time.Duration(num) * time.Millisecond) fmt.Fprintf(w, &amp;#34;duration: %d&amp;#34;, num) client.Incr(&amp;#34;requests.counter,page=home&amp;#34;, 1) client.</description>
    </item>
    <item>
      <title>使用Telegraf和Exporter监控中间件</title>
      <link>https://n9e.github.io/best-practice/middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://n9e.github.io/best-practice/middleware/</guid>
      <description>对于MySQL、Redis、MongoDB、Tomcat、RabbitMQ、Ceph、Cassandra、Consul等等各类中间件、数据库，Telegraf都可以监控，Prometheus生态也提供了各类Exporter，直接用就好了，如果有优化建议，就提PR，夜莺生态再搞一套采集意义不大，能够良好的集成，与社区协同起来才是关键。
本节起了一个巨大的标题，不过并不准备事无巨细的讲解每个中间件的采集配置，Telegraf的入门在这里，每个中间件都在这里成一个目录，目录下README就是文档。如果有Telegraf解决不了的，Google一下Exporter解决方案，互相补充一下。
数据采集有了Telegraf和Exporter，问题就不大了，但是，对于某一个具体的监控对象，比如MySQL，各个指标是什么意思？应该着重关注哪些指标？哪些指标应该配置告警规则？报警的时候应该如何处理？这就是非常专业的领域知识了，欢迎大家写博客分享，并把博客链接放到本节下面 :)
 一文说透MySQL监控，使用Prometheus生态的Exporter - By UlricQin  </description>
    </item>
    <item>
      <title>监控Kubernetes</title>
      <link>https://n9e.github.io/best-practice/k8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://n9e.github.io/best-practice/k8s/</guid>
      <description>kube-prometheus kube-prometheus 这个项目大家可以参考下。Kubernetes集群本身的运维管理，应该由一个专门的团队来做，这个专门的团队应该比较资深，对Kubernetes、对Prometheus都是比较熟悉的，用operator这种方式信手拈来。所以，在这个场景下，其实不太需要用到夜莺，那如果大家仍然想用夜莺来配置Kubernetes的告警规则、查看Kubernetes相关的监控数据，也没啥问题，只要把使用kube-prometheus启动的Prometheus接入夜莺即可。
后面，我们会针对Kubernetes场景在夜莺里做专门的功能支持，不过目前尚未开始，这里把kube-prometheus项目中的各类告警规则，整理转换成了夜莺系统中可导入的告警规则JSON，大家如果需要的话可以自取。
 Alertmanager KubeControlPlane KubePrometheus KubeStateMetrics NodeExporter PromOperator PrometheusSelf  如果用夜莺来做告警，其实就不需要Alertmanager了，所以下面kube-prometheus项目中提供的Alertmanager相关的告警规则，其实也用不上了，不过还是放在了这里，大家看自己的场景需求吧。
另外，kube-operator项目的告警规则，很多用到了recording rule，这些recording rule还是需要继续在Prometheus中配置，夜莺不提供recording rule的UI化管理。
Telegraf Telegraf监控Kubernetes有两个input plugin大家可以看看，一个是kube_inventory，一个是kubernetes 具体我还没有研究，大家如果有已经研究过的，欢迎写文章分享哈</description>
    </item>
    <item>
      <title>监控URL</title>
      <link>https://n9e.github.io/best-practice/http_response/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://n9e.github.io/best-practice/http_response/</guid>
      <description>之前在写调研笔记的时候，测试了PING监控和TCP探测监控，调研笔记在 这里 这个章节主要给大家讲解域名URL探测。直接上测试配置：
[[inputs.http_response]] urls = [&amp;#34;https://www.baidu.com&amp;#34;, &amp;#34;http://ulricqin.io/ping&amp;#34;] response_timeout = &amp;#34;5s&amp;#34; method = &amp;#34;GET&amp;#34; fielddrop = [&amp;#34;result_type&amp;#34;] tagexclude = [&amp;#34;result&amp;#34;, &amp;#34;status_code&amp;#34;] https://www.baidu.com 显然是通的，http://ulricqin.io/ping 这个是个假的URL，不通，我们测试一下输出的内容：
[root@10-255-0-34 telegraf-1.20.3]# ./usr/bin/telegraf --config etc/telegraf/telegraf.conf --input-filter http_response --test 2021-12-13T04:16:43Z I! Starting Telegraf 1.20.3 &amp;gt; http_response,host=10-255-0-34,method=GET,server=https://www.baidu.com content_length=227i,http_response_code=200i,response_time=0.028757521,result_code=0i 1639369003000000000 &amp;gt; http_response,host=10-255-0-34,method=GET,server=http://ulricqin.io/ping result_code=5i 1639369003000000000 这里有个字段是result_code，用这个字段配置告警即可，正常可以访问的URL，result_code是0，不正常就是非0，告警规则里可以配置如下promql：
http_response_result_code != 0 或者直接在夜莺的告警规则页面导入这条告警规则JSON：
[ { &amp;#34;name&amp;#34;: &amp;#34;有URL探测失败，请注意&amp;#34;, &amp;#34;note&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;severity&amp;#34;: 1, &amp;#34;disabled&amp;#34;: 0, &amp;#34;prom_for_duration&amp;#34;: 60, &amp;#34;prom_ql&amp;#34;: &amp;#34;http_response_result_code != 0&amp;#34;, &amp;#34;prom_eval_interval&amp;#34;: 15, &amp;#34;enable_stime&amp;#34;: &amp;#34;00:00&amp;#34;, &amp;#34;enable_etime&amp;#34;: &amp;#34;23:59&amp;#34;, &amp;#34;enable_days_of_week&amp;#34;: [ &amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;, &amp;#34;3&amp;#34;, &amp;#34;4&amp;#34;, &amp;#34;5&amp;#34;, &amp;#34;6&amp;#34;, &amp;#34;0&amp;#34; ], &amp;#34;notify_recovered&amp;#34;: 1, &amp;#34;notify_channels&amp;#34;: [ &amp;#34;email&amp;#34;, &amp;#34;dingtalk&amp;#34;, &amp;#34;wecom&amp;#34; ], &amp;#34;notify_repeat_step&amp;#34;: 60, &amp;#34;callbacks&amp;#34;: [], &amp;#34;runbook_url&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;append_tags&amp;#34;: [] } ] 如果想对域名返回的statuscode或者response body的内容做判断，Telegraf也是支持的，使用response_status_code和response_string_match这些字段配置，配置文件里有样例，大家可以自行参考下。</description>
    </item>
    <item>
      <title>监控日志（超级轻量的方案）</title>
      <link>https://n9e.github.io/best-practice/mtail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://n9e.github.io/best-practice/mtail/</guid>
      <description>前言 说到日志监控，大家第一反应的可能是ELK的方案，或者Loki的方案，这两个方案都是把日志采集了发到中心，在中心存储、查看、分析，不过这个方案相对比较重量级一些，如果我们的需求只是从日志中提取一些metrics数据，比如统计一些日志中出现的Error次数之类的，则有一个更简单的方案。
这个方案在夜莺v4版本中是有的，不过后来推荐大家客户端使用Telegraf，Telegraf没有这个能力，所以v5版本的夜莺没法监控日志，怎么办呢？这里给大家介绍一个Google出品的小工具，mtail，mtail和夜莺v4的方案类似，就是流式读取日志，通过正则表达式匹配的方式从日志中提取metrics指标，这种方式可以利用目标机器的算力，不过如果量太大，可能会影响目标机器上的业务程序，另外一个好处是无侵入性，不需要业务埋点，如果业务程序是第三方供应商提供的，我们改不了其代码，mtail此时就非常合适了。当然了，如果业务程序是我们公司的人自己写的，那还是建议用埋点的方式采集指标，mtail只是作为一个补充吧。
mtail简介 mtail的使用方案，参考如下两个文档（下载的话参考Releases页面）：
 Deploying Programming Guide  我们拿mtail的启动命令来举例其用法：
mtail --progs /etc/mtail --logs /var/log/syslog --logs /var/log/ntp/peerstats 通过 --progs 参数指定一个目录，这个目录里放置一堆的*.mtail文件，每个mtail文件就是描述的正则提取规则，通过 --logs 参数来指定要监控的日志目录，可以写通配符，--logs 可以写多次，上例中只是指定了 --progs 和 --logs ，没有其他参数，mtail启动之后会自动监听一个端口3903，在3903的/metrics接口暴露符合Prometheus协议的监控数据，Prometheus（或者Telegraf）就可以从 /metrics 接口提取监控数据。
这样看起来，原理就很清晰了，mtail启动之后，根据 --logs 找到相关日志文件文件，seek到文件末尾，开始流式读取，每读到一行，就根据 --progs 指定的那些规则文件做匹配，看是否符合某些正则，从中提取时序数据，然后通过3903的/metrics暴露采集到的监控指标。当然，除了Prometheus这种/metrics方式暴露，mtail还支持把监控数据直接推给graphite或者statsd，具体可以参考：这里
mtail样例 这里我用mtail监控一下n9e-server的日志，从中提取一下各个告警规则触发的notify的数量，这个日志举例：
2021-12-27 10:00:30.537582 INFO engine/logger.go:19 event(cbb8d4be5efd07983c296aaa4dec5737 triggered) notify: rule_id=9 [__name__=net_response_result_code author=qin ident=10-255-0-34 port=4567 protocol=tcp server=localhost]2@1640570430 很明显，日志中有这么个关键字：notify: rule_id=9，可以用正则来匹配，统计出现的行数，ruleid也可以从中提取到，这样，我们可以把ruleid作为标签上报，于是乎，我们就可以写出这样的mtail规则了：
[root@10-255-0-34 nightingale]# cat /etc/mtail/n9e-server.mtail counter mtail_alert_rule_notify_total by ruleid /notify: rule_id=(?P&amp;lt;ruleid&amp;gt;\d+)/ { mtail_alert_rule_notify_total[$ruleid]++ } 然后启动也比较简单，我这里就用nohup简单来做：
nohup mtail -logtostderr --progs /etc/mtail --logs server.</description>
    </item>
    <item>
      <title>监控MySQL</title>
      <link>https://n9e.github.io/best-practice/mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://n9e.github.io/best-practice/mysql/</guid>
      <description>使用Telegraf监控MySQL也较为简单，会采集很多指标，但是具体应该关注哪些指标，是个难点，本章会提供一些例子，欢迎大家补充最佳实践。
Telegraf的配置为了便于管理，可以拆成多个文件，放到统一目录中，使用 --config-directory 参数指定具体的目录，举例：
# telegraf 启动命令： ./usr/bin/telegraf --config ./etc/telegraf/telegraf.conf --config-directory ./etc/telegraf.d # 后面如果修改了telegraf.conf或者修改了telegraf.d下的配置，可以通过如下方式让Telegraf重新加载配置 kill -HUP `pidof telegraf` 我们创建一个mysql.conf的配置放到telegraf.d下，内容如下：
[[inputs.mysql]] servers = [&amp;#34;root:1234@tcp(localhost:3306)/?tls=false&amp;#34;] metric_version = 2 gather_global_variables = true interval_slow = &amp;#34;1m&amp;#34; tagexclude = [&amp;#34;innodb_version&amp;#34;] mysql采集插件的具体使用方式，参考 这里 的文档。下面笔者整理了监控大盘和告警规则，供大家参考：
大盘JSON：
[ { &amp;#34;name&amp;#34;: &amp;#34;MySQL关键指标 - by Telegraf&amp;#34;, &amp;#34;tags&amp;#34;: &amp;#34;MySQL&amp;#34;, &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;var\&amp;#34;:[{\&amp;#34;name\&amp;#34;:\&amp;#34;ident\&amp;#34;,\&amp;#34;selected\&amp;#34;:\&amp;#34;10-255-0-34\&amp;#34;,\&amp;#34;definition\&amp;#34;:\&amp;#34;label_values(mysql_uptime, ident)\&amp;#34;},{\&amp;#34;name\&amp;#34;:\&amp;#34;server\&amp;#34;,\&amp;#34;definition\&amp;#34;:\&amp;#34;label_values(mysql_uptime{ident=\\\&amp;#34;$ident\\\&amp;#34;}, server)\&amp;#34;,\&amp;#34;selected\&amp;#34;:\&amp;#34;localhost_3306\&amp;#34;}]}&amp;#34;, &amp;#34;chart_groups&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;MySQL关键指标&amp;#34;, &amp;#34;weight&amp;#34;: 0, &amp;#34;charts&amp;#34;: [ { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;Connections\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;rate(mysql_aborted_connects{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}[5m])\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;aborted_connections - {{ident}} - {{server}}\&amp;#34;},{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;mysql_variables_max_connections{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;max_connections - {{ident}} - {{server}}\&amp;#34;},{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;mysql_threads_connected{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;threads_connected - {{ident}} - {{server}}\&amp;#34;}],\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;short\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:8,\&amp;#34;x\&amp;#34;:0,\&amp;#34;y\&amp;#34;:0,\&amp;#34;i\&amp;#34;:\&amp;#34;0\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 }, { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;Slow Queries\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;rate(mysql_slow_queries{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}[5m])\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;slow_queries - {{ident}} - {{server}}\&amp;#34;}],\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;short\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:8,\&amp;#34;x\&amp;#34;:8,\&amp;#34;y\&amp;#34;:0,\&amp;#34;i\&amp;#34;:\&amp;#34;1\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 }, { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;Open Files\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;mysql_variables_open_files_limit{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;open_files_limit - {{ident}} - {{server}}\&amp;#34;},{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;mysql_variables_innodb_open_files{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;open_files_used - {{ident}} - {{server}}\&amp;#34;}],\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;short\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:8,\&amp;#34;x\&amp;#34;:16,\&amp;#34;y\&amp;#34;:0,\&amp;#34;i\&amp;#34;:\&amp;#34;2\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 }, { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;Queries per second\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;rate(mysql_queries{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}[1m])\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;mysql_queries - {{ident}} - {{server}}\&amp;#34;}],\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;short\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:8,\&amp;#34;x\&amp;#34;:0,\&amp;#34;y\&amp;#34;:2,\&amp;#34;i\&amp;#34;:\&amp;#34;3\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 }, { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;Writes per second\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;rate(mysql_com_insert{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}[1m])\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;command_insert - {{ident}} - {{server}}\&amp;#34;},{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;rate(mysql_com_update{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}[1m])\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;command_update - {{ident}} - {{server}}\&amp;#34;},{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;rate(mysql_com_delete{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}[1m])\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;command_delete - {{ident}} - {{server}}\&amp;#34;}],\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;short\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:8,\&amp;#34;x\&amp;#34;:16,\&amp;#34;y\&amp;#34;:2,\&amp;#34;i\&amp;#34;:\&amp;#34;4\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 }, { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;Threads\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;mysql_threads_running{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;threads_running - {{ident}} - {{server}}\&amp;#34;},{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;mysql_threads_connected{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;threads_connected - {{ident}} - {{server}}\&amp;#34;}],\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;short\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:8,\&amp;#34;x\&amp;#34;:16,\&amp;#34;y\&amp;#34;:4,\&amp;#34;i\&amp;#34;:\&amp;#34;5\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 }, { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;Data Reads/Writes per second\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;rate(mysql_innodb_data_reads{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}[5m])\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;mysql_innodb_data_reads - {{ident}} - {{server}}\&amp;#34;},{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;rate(mysql_innodb_data_writes{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}[5m])\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;mysql_innodb_data_writes - {{ident}} - {{server}}\&amp;#34;}],\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;short\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:8,\&amp;#34;x\&amp;#34;:0,\&amp;#34;y\&amp;#34;:4,\&amp;#34;i\&amp;#34;:\&amp;#34;6\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 }, { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;InnoDB Buffer Pool Size\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;mysql_variables_innodb_buffer_pool_size{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}\&amp;#34;}],\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;short\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:8,\&amp;#34;x\&amp;#34;:8,\&amp;#34;y\&amp;#34;:4,\&amp;#34;i\&amp;#34;:\&amp;#34;7\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 }, { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;InnoDB Buffer Pool Pages\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;mysql_innodb_buffer_pool_pages_free{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}\&amp;#34;},{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;mysql_innodb_buffer_pool_pages_data{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}\&amp;#34;},{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;mysql_innodb_buffer_pool_pages_total{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}\&amp;#34;}],\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;short\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:11,\&amp;#34;x\&amp;#34;:0,\&amp;#34;y\&amp;#34;:6,\&amp;#34;i\&amp;#34;:\&amp;#34;8\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 }, { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;TPS\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;rate(mysql_com_commit{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}[1m]) + rate(mysql_com_rollback{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}[1m])\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;tps - {{ident}} - {{server}}\&amp;#34;}],\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;short\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:8,\&amp;#34;x\&amp;#34;:8,\&amp;#34;y\&amp;#34;:2,\&amp;#34;i\&amp;#34;:\&amp;#34;9\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 }, { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;InnoDB Buffer Pool Hit Rate\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;100 - increase(mysql_innodb_buffer_pool_reads{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}[5m]) / increase(mysql_innodb_buffer_pool_read_requests{ident=\\\&amp;#34;$ident\\\&amp;#34;, server=\\\&amp;#34;$server\\\&amp;#34;}[5m]) * 100\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;rate - {{ident}} - {{server}}\&amp;#34;}],\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;short\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:13,\&amp;#34;x\&amp;#34;:11,\&amp;#34;y\&amp;#34;:6,\&amp;#34;i\&amp;#34;:\&amp;#34;10\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 } ] } ] } ] 告警规则JSON：</description>
    </item>
    <item>
      <title>监控Redis</title>
      <link>https://n9e.github.io/best-practice/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://n9e.github.io/best-practice/redis/</guid>
      <description>Telegraf可以监控Redis，相关配置如下：
[[inputs.redis]] servers = [&amp;#34;tcp://localhost:6379&amp;#34;] 这是最简单的一个配置了，更多的参数可以参考telegraf.conf中的inputs.redis部分的注释，也可以把这个配置独立成一个单独的文件，参考 监控MySQL 章节。
关键是下面的监控大盘配置，json如下，可以直接导入监控大盘使用。
[ { &amp;#34;name&amp;#34;: &amp;#34;Redis关键指标 - by Telegraf&amp;#34;, &amp;#34;tags&amp;#34;: &amp;#34;Redis&amp;#34;, &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;var\&amp;#34;:[{\&amp;#34;name\&amp;#34;:\&amp;#34;ident\&amp;#34;,\&amp;#34;definition\&amp;#34;:\&amp;#34;label_values(redis_used_memory, ident)\&amp;#34;,\&amp;#34;selected\&amp;#34;:\&amp;#34;10-255-0-34\&amp;#34;,\&amp;#34;multi\&amp;#34;:true,\&amp;#34;allOption\&amp;#34;:true},{\&amp;#34;name\&amp;#34;:\&amp;#34;server\&amp;#34;,\&amp;#34;definition\&amp;#34;:\&amp;#34;label_values(redis_used_memory{ident=~\\\&amp;#34;$ident\\\&amp;#34;}, server)\&amp;#34;,\&amp;#34;multi\&amp;#34;:true,\&amp;#34;selected\&amp;#34;:[\&amp;#34;all\&amp;#34;],\&amp;#34;options\&amp;#34;:[\&amp;#34;localhost\&amp;#34;],\&amp;#34;allOption\&amp;#34;:true},{\&amp;#34;name\&amp;#34;:\&amp;#34;port\&amp;#34;,\&amp;#34;definition\&amp;#34;:\&amp;#34;label_values(redis_used_memory{ident=~\\\&amp;#34;$ident\\\&amp;#34;, server=~\\\&amp;#34;$server\\\&amp;#34;}, port)\&amp;#34;,\&amp;#34;multi\&amp;#34;:true,\&amp;#34;selected\&amp;#34;:[\&amp;#34;all\&amp;#34;],\&amp;#34;options\&amp;#34;:[\&amp;#34;6379\&amp;#34;],\&amp;#34;allOption\&amp;#34;:true}]}&amp;#34;, &amp;#34;chart_groups&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;Default chart group&amp;#34;, &amp;#34;weight&amp;#34;: 0, &amp;#34;charts&amp;#34;: [ { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;Redis memory\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;redis_used_memory{ident=~\\\&amp;#34;$ident\\\&amp;#34;, server=~\\\&amp;#34;$server\\\&amp;#34;, port=~\\\&amp;#34;$port\\\&amp;#34;}\&amp;#34;},{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;redis_used_memory_lua{ident=~\\\&amp;#34;$ident\\\&amp;#34;, server=~\\\&amp;#34;$server\\\&amp;#34;, port=~\\\&amp;#34;$port\\\&amp;#34;}\&amp;#34;},{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;redis_used_memory_peak{ident=~\\\&amp;#34;$ident\\\&amp;#34;, server=~\\\&amp;#34;$server\\\&amp;#34;, port=~\\\&amp;#34;$port\\\&amp;#34;}\&amp;#34;},{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;redis_used_memory_rss{ident=~\\\&amp;#34;$ident\\\&amp;#34;, server=~\\\&amp;#34;$server\\\&amp;#34;, port=~\\\&amp;#34;$port\\\&amp;#34;}\&amp;#34;},{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;redis_maxmemory{ident=~\\\&amp;#34;$ident\\\&amp;#34;, server=~\\\&amp;#34;$server\\\&amp;#34;, port=~\\\&amp;#34;$port\\\&amp;#34;}\&amp;#34;}],\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;short\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:12,\&amp;#34;x\&amp;#34;:0,\&amp;#34;y\&amp;#34;:0,\&amp;#34;i\&amp;#34;:\&amp;#34;0\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 }, { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;Redis clients\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;redis_clients{ident=~\\\&amp;#34;$ident\\\&amp;#34;, server=~\\\&amp;#34;$server\\\&amp;#34;, port=~\\\&amp;#34;$port\\\&amp;#34;}\&amp;#34;},{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;redis_blocked_clients{ident=~\\\&amp;#34;$ident\\\&amp;#34;, server=~\\\&amp;#34;$server\\\&amp;#34;, port=~\\\&amp;#34;$port\\\&amp;#34;}\&amp;#34;}],\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;short\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:12,\&amp;#34;x\&amp;#34;:12,\&amp;#34;y\&amp;#34;:0,\&amp;#34;i\&amp;#34;:\&amp;#34;1\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 }, { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;commands_processed / sec\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;rate(redis_total_commands_processed{ident=~\\\&amp;#34;$ident\\\&amp;#34;, server=~\\\&amp;#34;$server\\\&amp;#34;, port=~\\\&amp;#34;$port\\\&amp;#34;}[1m])\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;commands_processed_per_sec - {{ident}} - {{server}}:{{port}}\&amp;#34;}],\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;short\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:12,\&amp;#34;x\&amp;#34;:0,\&amp;#34;y\&amp;#34;:2,\&amp;#34;i\&amp;#34;:\&amp;#34;2\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 }, { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;keyspace hits and misses\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;irate(redis_keyspace_hits{ident=~\\\&amp;#34;$ident\\\&amp;#34;, server=~\\\&amp;#34;$server\\\&amp;#34;, port=~\\\&amp;#34;$port\\\&amp;#34;}[5m])\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;hits - {{ident}} - {{server}}:{{port}}\&amp;#34;},{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;irate(redis_keyspace_misses{ident=~\\\&amp;#34;$ident\\\&amp;#34;, server=~\\\&amp;#34;$server\\\&amp;#34;, port=~\\\&amp;#34;$port\\\&amp;#34;}[5m])\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;misses - {{ident}} - {{server}}:{{port}}\&amp;#34;}],\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;short\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:12,\&amp;#34;x\&amp;#34;:12,\&amp;#34;y\&amp;#34;:2,\&amp;#34;i\&amp;#34;:\&amp;#34;3\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 }, { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;Network IO\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;rate(redis_total_net_input_bytes{ident=~\\\&amp;#34;$ident\\\&amp;#34;, server=~\\\&amp;#34;$server\\\&amp;#34;, port=~\\\&amp;#34;$port\\\&amp;#34;}[5m])\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;in_bytes - {{ident}} - {{server}}:{{port}}\&amp;#34;},{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;rate(redis_total_net_output_bytes{ident=~\\\&amp;#34;$ident\\\&amp;#34;, server=~\\\&amp;#34;$server\\\&amp;#34;, port=~\\\&amp;#34;$port\\\&amp;#34;}[5m])\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;out_bytes - {{ident}} - {{server}}:{{port}}\&amp;#34;}],\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;short\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1024},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:12,\&amp;#34;x\&amp;#34;:0,\&amp;#34;y\&amp;#34;:4,\&amp;#34;i\&amp;#34;:\&amp;#34;4\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 }, { &amp;#34;configs&amp;#34;: &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;Expired Evicted keys\&amp;#34;,\&amp;#34;QL\&amp;#34;:[{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;rate(redis_expired_keys{ident=~\\\&amp;#34;$ident\\\&amp;#34;, server=~\\\&amp;#34;$server\\\&amp;#34;, port=~\\\&amp;#34;$port\\\&amp;#34;}[5m])\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;expired_keys - {{ident}} - {{server}}:{{port}}\&amp;#34;},{\&amp;#34;PromQL\&amp;#34;:\&amp;#34;rate(redis_evicted_keys{ident=~\\\&amp;#34;$ident\\\&amp;#34;, server=~\\\&amp;#34;$server\\\&amp;#34;, port=~\\\&amp;#34;$port\\\&amp;#34;}[5m])\&amp;#34;,\&amp;#34;Legend\&amp;#34;:\&amp;#34;evicted_keys - {{ident}} - {{server}}:{{port}}\&amp;#34;}],\&amp;#34;legend\&amp;#34;:false,\&amp;#34;highLevelConfig\&amp;#34;:{\&amp;#34;shared\&amp;#34;:true,\&amp;#34;sharedSortDirection\&amp;#34;:\&amp;#34;desc\&amp;#34;,\&amp;#34;precision\&amp;#34;:\&amp;#34;short\&amp;#34;,\&amp;#34;formatUnit\&amp;#34;:1000},\&amp;#34;version\&amp;#34;:1,\&amp;#34;layout\&amp;#34;:{\&amp;#34;h\&amp;#34;:2,\&amp;#34;w\&amp;#34;:12,\&amp;#34;x\&amp;#34;:12,\&amp;#34;y\&amp;#34;:4,\&amp;#34;i\&amp;#34;:\&amp;#34;5\&amp;#34;}}&amp;#34;, &amp;#34;weight&amp;#34;: 0 } ] } ] } ] </description>
    </item>
  </channel>
</rss>